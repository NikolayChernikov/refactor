version: "3.8"
services:
  api:
    container_name: ${API_HOST}
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - ${EXT_API_PORT}:5000
    depends_on:
      postgres_migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - TZ=${TZ}
    volumes:
      - ${STATIC_DIR}:${STATIC_DIR_INTERNAL}
    command: [ "poetry", "run", "uvicorn", "app:create_app", "--host", "0.0.0.0", "--port", "5000" ]

  postgres:
    container_name: ${POSTGRES_HOST}
    restart: unless-stopped
    image: postgres:13.1
    ports:
      - ${EXT_POSTGRES_PORT}:5432
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    volumes:
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5

  postgres_migrations:
    container_name: ${POSTGRES_HOST}_migrations
    build:
      context: .
      dockerfile: docker/postgres_migrations/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - TZ=${TZ}
    command: [
      "poetry", "run", "python3", "-m", "scripts.migrate"
    ]

networks:
  default:
    name: shared-network
    external: true
